class Solution {
    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> res = new ArrayList<>();
        List<Integer> cur = new ArrayList<>();
        boolean[] visited = new boolean[nums.length];
        Arrays.sort(nums);
        dfs(res, cur, visited, nums);
        return res;
    }

    private void dfs(List<List<Integer>> res, List<Integer> cur, boolean[] visited, int[] nums){
        if(cur.size() == nums.length){
            res.add(new ArrayList<>(cur));
        }

        for(int i = 0; i < visited.length; i++){
            if(i != 0 && nums[i] == nums[i - 1] && !visited[i - 1]){
                continue;
            }
            if(visited[i]){
                continue;
            }

            visited[i] = true;
            cur.add(nums[i]);
            dfs(res, cur, visited, nums);
            cur.remove(cur.size() - 1);
            visited[i] = false;
        }
    }
}