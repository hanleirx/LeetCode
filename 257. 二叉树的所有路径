/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<String> binaryTreePaths(TreeNode root) {
        List<String> paths = new ArrayList<>();
        if(root == null){
            return paths;
        }
        List<Integer> values = new ArrayList<>();
        dfs(paths, root, values);
        return paths;
    }

    private void dfs(List<String> paths, TreeNode node, List<Integer> values){
        if(node == null){
            return;
        }
        values.add(node.val);
        if(isLeaf(node)){
            paths.add(buildPath(values));
        }else{
            dfs(paths, node.left, values);
            dfs(paths, node.right, values);
        }
        values.remove(values.size() - 1);
    }

    private boolean isLeaf(TreeNode node){
        return node.left == null && node.right == null;
    }

    private String buildPath(List<Integer> values){
        StringBuffer re = new StringBuffer();
        for(int i = 0; i < values.size(); i++){
            re.append(values.get(i));
            if(i != values.size() -1){
                re.append("->");
            }
        }
        return re.toString();
    }
}