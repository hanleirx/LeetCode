class Solution {
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        List<List<Integer>> res = new ArrayList<>();
        Arrays.sort(candidates);
        backtracking(res, new ArrayList<>(), new boolean[candidates.length], candidates, target, 0);
        return res;
    }

    private void backtracking(List<List<Integer>> res, List<Integer> list, boolean[] visted, int[] candidates, int target, int start){
        if(target == 0){
            res.add(new ArrayList<>(list));
            return;
        }
        for(int i = start; i < candidates.length; i++){
            if(i > 0 && candidates[i] == candidates[i - 1] && !visted[i - 1]){
                continue;
            }
            if (candidates[i] <= target) {
                visted[i] = true;
                list.add(candidates[i]);
                backtracking(res, list, visted, candidates, target - candidates[i], i + 1);
                visted[i] = false;
                list.remove(list.size() - 1);
            }
        }
    }
}