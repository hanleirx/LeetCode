class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> res = new ArrayList<>();
        backtracking(res, new ArrayList<>(), candidates, target, 0);
        return res;
    }

    private void backtracking(List<List<Integer>> res, List<Integer> list, int[] candidates, int target, int start){
        if(target == 0){
            res.add(new ArrayList<>(list));
            return;
        }
        for(int i = start; i < candidates.length; i ++){
            if(candidates[i] <= target){
                list.add(candidates[i]);
                backtracking(res, list, candidates, target - candidates[i], i);
                list.remove(list.size() - 1);
            }
        }

    }
}