class Solution {
    public int findKthLargest(int[] nums, int k) {
        int l = 0;
        int r = nums.length - 1;
        int t = nums.length - k;
        int c = -1;
        while(c != t){
            c = partition(l, r, nums);
            if(c < t){
                l = c + 1;
            }else if(c > t){
                r = c - 1;
            }
        }
        return nums[c];
    }

    public int partition(int l, int r, int[] nums){
        if(l==r)return l;
        int ran = l + (int)(Math.random()*(r-l+1));
        int pivot = nums[ran];
        swap(ran, r, nums);
        int i = l;
        int j = r -1;
        while(i < j){
            while(i < j && nums[i] <= pivot) i++;
            while(i < j && nums[j] > pivot) j--;
            if(i != j) swap(i, j, nums);
        }
        if(nums[i] > pivot){
            swap(i, r, nums);
            return i;
        }
        return r;
    }

    public void swap(int i, int j, int[] nums){
        int tmp = nums[i];
        nums[i] = nums[j];
        nums[j] = tmp;
    }
}