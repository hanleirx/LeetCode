class Solution {
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> res = new ArrayList<>();
        List<Integer> curList = new ArrayList<>();
        boolean[] visited = new boolean[nums.length];
        dfs(res, curList, nums, visited);
        return res;
    }

    private void dfs(List<List<Integer>> res, List<Integer> curList, int[] nums, boolean[] visited){
        if(curList.size() == nums.length){
            res.add(new ArrayList<>(curList));
            return;
        }
        for(int i = 0; i < visited.length; i++){
            if(visited[i]){
                continue;
            }
            visited[i] = true;
            curList.add(nums[i]);
            dfs(res, curList, nums, visited);
            curList.remove(curList.size() - 1);
            visited[i] = false;
        }
    }
}