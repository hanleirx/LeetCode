class Solution {
    public int shortestPathBinaryMatrix(int[][] grid) {
        if(grid == null || grid.length == 0 || grid[0].length ==0) return -1;
        int[][] direction = {{-1,-1},{1,1,},{1,0},{0,1},{-1,0},{0,-1},{-1,1},{1,-1}};
        int rows = grid.length;
        int colums = grid[0].length;
        Queue<int []> queue = new LinkedList<>();
        int pathLen = 0;
        queue.add(new int[]{0,0});;
        while(!queue.isEmpty()){
            pathLen++;
            int size = queue.size();
            while(size-- > 0 ){
                int[] point = queue.poll();
                int pr = point[0];
                int pc = point[1];
                if(grid[pr][pc] ==1) continue;
                if(pr == rows -1 && pc == colums -1) return pathLen;
                grid[pr][pc] = 1;
                for(int [] d : direction){
                    int nr = pr + d[0];
                    int nc = pc + d[1];
                    if(nr <0 || nc <0 || nr > rows -1 || nc > colums -1 ){
                        continue;
                    }
                    queue.add(new int[]{nr,nc});
                }
            }

        }
        return -1;
    }
}



// class Solution {
//     public int shortestPathBinaryMatrix(int[][] grid) {
//         if(grid == null || grid.length == 0 || grid[0].length ==0) return -1;
//         int[][] direction = {{-1,-1},{1,1,},{1,0},{0,1},{-1,0},{0,-1},{-1,1},{1,-1}};
//         int rows = grid.length;
//         int colums = grid[0].length;
//         Queue<Pair<Integer, Integer>> queue = new LinkedList<>();
//         int pathLen = 0;
//         queue.add(new Pair<>(0,0));;
//         while(!queue.isEmpty()){
//             pathLen++;
//             int size = queue.size();
//             while(size-- > 0 ){
//                 Pair<Integer,Integer> point = queue.poll();
//                 int pr = point.getKey();
//                 int pc = point.getValue();
//                 if(grid[pr][pc] ==1) continue;
//                 if(pr == rows -1 && pc == colums -1) return pathLen;
//                 grid[pr][pc] = 1;
//                 for(int [] d : direction){
//                     int nr = pr + d[0];
//                     int nc = pc + d[1];
//                     if(nr <0 || nc <0 || nr > rows -1 || nc > colums -1 ){
//                         continue;
//                     }
//                     queue.add(new Pair<>(nr, nc));
//                 }
//             }

//         }
//         return -1;
//     }
// }